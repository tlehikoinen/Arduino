
BinaryCounter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000048a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000436  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000048a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000967  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bc  00000000  00000000  00000ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000579  00000000  00000000  00001587  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001b00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000437  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003b0  00000000  00000000  00001ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000023a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	60 00       	.word	0x0060	; ????
  6a:	75 00       	.word	0x0075	; ????
  6c:	7e 00       	.word	0x007e	; ????
  6e:	90 00       	.word	0x0090	; ????
  70:	a2 00       	.word	0x00a2	; ????
  72:	b1 00       	.word	0x00b1	; ????
  74:	c3 00       	.word	0x00c3	; ????
  76:	d8 00       	.word	0x00d8	; ????
  78:	e4 00       	.word	0x00e4	; ????
  7a:	fc 00       	.word	0x00fc	; ????
  7c:	11 01       	movw	r2, r2
  7e:	26 01       	movw	r4, r12
  80:	38 01       	movw	r6, r16
  82:	47 01       	movw	r8, r14
  84:	59 01       	movw	r10, r18
  86:	6b 01       	movw	r12, r22

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d8 e0       	ldi	r29, 0x08	; 8
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61
  94:	0e 94 cd 01 	call	0x39a	; 0x39a <main>
  98:	0c 94 19 02 	jmp	0x432	; 0x432 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <SevenSegDimSegments>:
				break;
				
			}
			case 'u' : {		
				SevenSegDimSegments();
				SEGMENT_B_ON; SEGMENT_C_ON; SEGMENT_D_ON; SEGMENT_E_ON; SEGMENT_F_ON;
  a0:	85 b1       	in	r24, 0x05	; 5
  a2:	15 b8       	out	0x05, r1	; 5
  a4:	8b b1       	in	r24, 0x0b	; 11
  a6:	8f 77       	andi	r24, 0x7F	; 127
  a8:	8b b9       	out	0x0b, r24	; 11
  aa:	08 95       	ret

000000ac <SevenSegTurnNumberOn>:
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	80 31       	cpi	r24, 0x10	; 16
  b0:	91 05       	cpc	r25, r1
  b2:	08 f0       	brcs	.+2      	; 0xb6 <SevenSegTurnNumberOn+0xa>
  b4:	1e c1       	rjmp	.+572    	; 0x2f2 <SevenSegTurnNumberOn+0x246>
  b6:	fc 01       	movw	r30, r24
  b8:	ec 5c       	subi	r30, 0xCC	; 204
  ba:	ff 4f       	sbci	r31, 0xFF	; 255
  bc:	0c 94 04 02 	jmp	0x408	; 0x408 <__tablejump2__>
  c0:	0e 94 50 00 	call	0xa0	; 0xa0 <SevenSegDimSegments>
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	85 b9       	out	0x05, r24	; 5
  ca:	85 b1       	in	r24, 0x05	; 5
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	85 b9       	out	0x05, r24	; 5
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	84 60       	ori	r24, 0x04	; 4
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	85 b1       	in	r24, 0x05	; 5
  d8:	88 60       	ori	r24, 0x08	; 8
  da:	85 b9       	out	0x05, r24	; 5
  dc:	85 b1       	in	r24, 0x05	; 5
  de:	80 61       	ori	r24, 0x10	; 16
  e0:	85 b9       	out	0x05, r24	; 5
  e2:	85 b1       	in	r24, 0x05	; 5
  e4:	80 62       	ori	r24, 0x20	; 32
  e6:	85 b9       	out	0x05, r24	; 5
  e8:	08 95       	ret
  ea:	0e 94 50 00 	call	0xa0	; 0xa0 <SevenSegDimSegments>
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	82 60       	ori	r24, 0x02	; 2
  f2:	85 b9       	out	0x05, r24	; 5
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	84 60       	ori	r24, 0x04	; 4
  f8:	85 b9       	out	0x05, r24	; 5
  fa:	08 95       	ret
  fc:	0e 94 50 00 	call	0xa0	; 0xa0 <SevenSegDimSegments>
 100:	85 b1       	in	r24, 0x05	; 5
 102:	81 60       	ori	r24, 0x01	; 1
 104:	85 b9       	out	0x05, r24	; 5
 106:	85 b1       	in	r24, 0x05	; 5
 108:	82 60       	ori	r24, 0x02	; 2
 10a:	85 b9       	out	0x05, r24	; 5
 10c:	85 b1       	in	r24, 0x05	; 5
 10e:	88 60       	ori	r24, 0x08	; 8
 110:	85 b9       	out	0x05, r24	; 5
 112:	85 b1       	in	r24, 0x05	; 5
 114:	80 61       	ori	r24, 0x10	; 16
 116:	85 b9       	out	0x05, r24	; 5
 118:	8b b1       	in	r24, 0x0b	; 11
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	8b b9       	out	0x0b, r24	; 11
 11e:	08 95       	ret
 120:	0e 94 50 00 	call	0xa0	; 0xa0 <SevenSegDimSegments>
 124:	85 b1       	in	r24, 0x05	; 5
 126:	81 60       	ori	r24, 0x01	; 1
 128:	85 b9       	out	0x05, r24	; 5
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	85 b9       	out	0x05, r24	; 5
 130:	85 b1       	in	r24, 0x05	; 5
 132:	84 60       	ori	r24, 0x04	; 4
 134:	85 b9       	out	0x05, r24	; 5
 136:	85 b1       	in	r24, 0x05	; 5
 138:	88 60       	ori	r24, 0x08	; 8
 13a:	85 b9       	out	0x05, r24	; 5
 13c:	8b b1       	in	r24, 0x0b	; 11
 13e:	80 68       	ori	r24, 0x80	; 128
 140:	8b b9       	out	0x0b, r24	; 11
 142:	08 95       	ret
 144:	0e 94 50 00 	call	0xa0	; 0xa0 <SevenSegDimSegments>
 148:	85 b1       	in	r24, 0x05	; 5
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	85 b9       	out	0x05, r24	; 5
 14e:	85 b1       	in	r24, 0x05	; 5
 150:	84 60       	ori	r24, 0x04	; 4
 152:	85 b9       	out	0x05, r24	; 5
 154:	85 b1       	in	r24, 0x05	; 5
 156:	80 62       	ori	r24, 0x20	; 32
 158:	85 b9       	out	0x05, r24	; 5
 15a:	8b b1       	in	r24, 0x0b	; 11
 15c:	80 68       	ori	r24, 0x80	; 128
 15e:	8b b9       	out	0x0b, r24	; 11
 160:	08 95       	ret
 162:	0e 94 50 00 	call	0xa0	; 0xa0 <SevenSegDimSegments>
 166:	85 b1       	in	r24, 0x05	; 5
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	85 b9       	out	0x05, r24	; 5
 16c:	85 b1       	in	r24, 0x05	; 5
 16e:	84 60       	ori	r24, 0x04	; 4
 170:	85 b9       	out	0x05, r24	; 5
 172:	85 b1       	in	r24, 0x05	; 5
 174:	88 60       	ori	r24, 0x08	; 8
 176:	85 b9       	out	0x05, r24	; 5
 178:	85 b1       	in	r24, 0x05	; 5
 17a:	80 62       	ori	r24, 0x20	; 32
 17c:	85 b9       	out	0x05, r24	; 5
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	80 68       	ori	r24, 0x80	; 128
 182:	8b b9       	out	0x0b, r24	; 11
 184:	08 95       	ret
 186:	0e 94 50 00 	call	0xa0	; 0xa0 <SevenSegDimSegments>
 18a:	85 b1       	in	r24, 0x05	; 5
 18c:	81 60       	ori	r24, 0x01	; 1
 18e:	85 b9       	out	0x05, r24	; 5
 190:	85 b1       	in	r24, 0x05	; 5
 192:	84 60       	ori	r24, 0x04	; 4
 194:	85 b9       	out	0x05, r24	; 5
 196:	85 b1       	in	r24, 0x05	; 5
 198:	88 60       	ori	r24, 0x08	; 8
 19a:	85 b9       	out	0x05, r24	; 5
 19c:	85 b1       	in	r24, 0x05	; 5
 19e:	80 61       	ori	r24, 0x10	; 16
 1a0:	85 b9       	out	0x05, r24	; 5
 1a2:	85 b1       	in	r24, 0x05	; 5
 1a4:	80 62       	ori	r24, 0x20	; 32
 1a6:	85 b9       	out	0x05, r24	; 5
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	80 68       	ori	r24, 0x80	; 128
 1ac:	8b b9       	out	0x0b, r24	; 11
 1ae:	08 95       	ret
 1b0:	0e 94 50 00 	call	0xa0	; 0xa0 <SevenSegDimSegments>
 1b4:	85 b1       	in	r24, 0x05	; 5
 1b6:	81 60       	ori	r24, 0x01	; 1
 1b8:	85 b9       	out	0x05, r24	; 5
 1ba:	85 b1       	in	r24, 0x05	; 5
 1bc:	82 60       	ori	r24, 0x02	; 2
 1be:	85 b9       	out	0x05, r24	; 5
 1c0:	85 b1       	in	r24, 0x05	; 5
 1c2:	84 60       	ori	r24, 0x04	; 4
 1c4:	85 b9       	out	0x05, r24	; 5
 1c6:	08 95       	ret
 1c8:	0e 94 50 00 	call	0xa0	; 0xa0 <SevenSegDimSegments>
 1cc:	85 b1       	in	r24, 0x05	; 5
 1ce:	81 60       	ori	r24, 0x01	; 1
 1d0:	85 b9       	out	0x05, r24	; 5
 1d2:	85 b1       	in	r24, 0x05	; 5
 1d4:	82 60       	ori	r24, 0x02	; 2
 1d6:	85 b9       	out	0x05, r24	; 5
 1d8:	85 b1       	in	r24, 0x05	; 5
 1da:	84 60       	ori	r24, 0x04	; 4
 1dc:	85 b9       	out	0x05, r24	; 5
 1de:	85 b1       	in	r24, 0x05	; 5
 1e0:	88 60       	ori	r24, 0x08	; 8
 1e2:	85 b9       	out	0x05, r24	; 5
 1e4:	85 b1       	in	r24, 0x05	; 5
 1e6:	80 61       	ori	r24, 0x10	; 16
 1e8:	85 b9       	out	0x05, r24	; 5
 1ea:	85 b1       	in	r24, 0x05	; 5
 1ec:	80 62       	ori	r24, 0x20	; 32
 1ee:	85 b9       	out	0x05, r24	; 5
 1f0:	8b b1       	in	r24, 0x0b	; 11
 1f2:	80 68       	ori	r24, 0x80	; 128
 1f4:	8b b9       	out	0x0b, r24	; 11
 1f6:	08 95       	ret
 1f8:	0e 94 50 00 	call	0xa0	; 0xa0 <SevenSegDimSegments>
 1fc:	85 b1       	in	r24, 0x05	; 5
 1fe:	81 60       	ori	r24, 0x01	; 1
 200:	85 b9       	out	0x05, r24	; 5
 202:	85 b1       	in	r24, 0x05	; 5
 204:	82 60       	ori	r24, 0x02	; 2
 206:	85 b9       	out	0x05, r24	; 5
 208:	85 b1       	in	r24, 0x05	; 5
 20a:	84 60       	ori	r24, 0x04	; 4
 20c:	85 b9       	out	0x05, r24	; 5
 20e:	85 b1       	in	r24, 0x05	; 5
 210:	88 60       	ori	r24, 0x08	; 8
 212:	85 b9       	out	0x05, r24	; 5
 214:	85 b1       	in	r24, 0x05	; 5
 216:	80 62       	ori	r24, 0x20	; 32
 218:	85 b9       	out	0x05, r24	; 5
 21a:	8b b1       	in	r24, 0x0b	; 11
 21c:	80 68       	ori	r24, 0x80	; 128
 21e:	8b b9       	out	0x0b, r24	; 11
 220:	08 95       	ret
 222:	0e 94 50 00 	call	0xa0	; 0xa0 <SevenSegDimSegments>
 226:	85 b1       	in	r24, 0x05	; 5
 228:	81 60       	ori	r24, 0x01	; 1
 22a:	85 b9       	out	0x05, r24	; 5
 22c:	85 b1       	in	r24, 0x05	; 5
 22e:	82 60       	ori	r24, 0x02	; 2
 230:	85 b9       	out	0x05, r24	; 5
 232:	85 b1       	in	r24, 0x05	; 5
 234:	84 60       	ori	r24, 0x04	; 4
 236:	85 b9       	out	0x05, r24	; 5
 238:	85 b1       	in	r24, 0x05	; 5
 23a:	80 61       	ori	r24, 0x10	; 16
 23c:	85 b9       	out	0x05, r24	; 5
 23e:	85 b1       	in	r24, 0x05	; 5
 240:	80 62       	ori	r24, 0x20	; 32
 242:	85 b9       	out	0x05, r24	; 5
 244:	8b b1       	in	r24, 0x0b	; 11
 246:	80 68       	ori	r24, 0x80	; 128
 248:	8b b9       	out	0x0b, r24	; 11
 24a:	08 95       	ret
 24c:	0e 94 50 00 	call	0xa0	; 0xa0 <SevenSegDimSegments>
 250:	85 b1       	in	r24, 0x05	; 5
 252:	84 60       	ori	r24, 0x04	; 4
 254:	85 b9       	out	0x05, r24	; 5
 256:	85 b1       	in	r24, 0x05	; 5
 258:	88 60       	ori	r24, 0x08	; 8
 25a:	85 b9       	out	0x05, r24	; 5
 25c:	85 b1       	in	r24, 0x05	; 5
 25e:	80 61       	ori	r24, 0x10	; 16
 260:	85 b9       	out	0x05, r24	; 5
 262:	85 b1       	in	r24, 0x05	; 5
 264:	80 62       	ori	r24, 0x20	; 32
 266:	85 b9       	out	0x05, r24	; 5
 268:	8b b1       	in	r24, 0x0b	; 11
 26a:	80 68       	ori	r24, 0x80	; 128
 26c:	8b b9       	out	0x0b, r24	; 11
 26e:	08 95       	ret
 270:	0e 94 50 00 	call	0xa0	; 0xa0 <SevenSegDimSegments>
 274:	85 b1       	in	r24, 0x05	; 5
 276:	81 60       	ori	r24, 0x01	; 1
 278:	85 b9       	out	0x05, r24	; 5
 27a:	85 b1       	in	r24, 0x05	; 5
 27c:	88 60       	ori	r24, 0x08	; 8
 27e:	85 b9       	out	0x05, r24	; 5
 280:	85 b1       	in	r24, 0x05	; 5
 282:	80 61       	ori	r24, 0x10	; 16
 284:	85 b9       	out	0x05, r24	; 5
 286:	85 b1       	in	r24, 0x05	; 5
 288:	80 62       	ori	r24, 0x20	; 32
 28a:	85 b9       	out	0x05, r24	; 5
 28c:	08 95       	ret
 28e:	0e 94 50 00 	call	0xa0	; 0xa0 <SevenSegDimSegments>
 292:	85 b1       	in	r24, 0x05	; 5
 294:	82 60       	ori	r24, 0x02	; 2
 296:	85 b9       	out	0x05, r24	; 5
 298:	85 b1       	in	r24, 0x05	; 5
 29a:	84 60       	ori	r24, 0x04	; 4
 29c:	85 b9       	out	0x05, r24	; 5
 29e:	85 b1       	in	r24, 0x05	; 5
 2a0:	88 60       	ori	r24, 0x08	; 8
 2a2:	85 b9       	out	0x05, r24	; 5
 2a4:	85 b1       	in	r24, 0x05	; 5
 2a6:	80 61       	ori	r24, 0x10	; 16
 2a8:	85 b9       	out	0x05, r24	; 5
 2aa:	8b b1       	in	r24, 0x0b	; 11
 2ac:	80 68       	ori	r24, 0x80	; 128
 2ae:	8b b9       	out	0x0b, r24	; 11
 2b0:	08 95       	ret
 2b2:	0e 94 50 00 	call	0xa0	; 0xa0 <SevenSegDimSegments>
 2b6:	85 b1       	in	r24, 0x05	; 5
 2b8:	81 60       	ori	r24, 0x01	; 1
 2ba:	85 b9       	out	0x05, r24	; 5
 2bc:	85 b1       	in	r24, 0x05	; 5
 2be:	88 60       	ori	r24, 0x08	; 8
 2c0:	85 b9       	out	0x05, r24	; 5
 2c2:	85 b1       	in	r24, 0x05	; 5
 2c4:	80 61       	ori	r24, 0x10	; 16
 2c6:	85 b9       	out	0x05, r24	; 5
 2c8:	85 b1       	in	r24, 0x05	; 5
 2ca:	80 62       	ori	r24, 0x20	; 32
 2cc:	85 b9       	out	0x05, r24	; 5
 2ce:	8b b1       	in	r24, 0x0b	; 11
 2d0:	80 68       	ori	r24, 0x80	; 128
 2d2:	8b b9       	out	0x0b, r24	; 11
 2d4:	08 95       	ret
 2d6:	0e 94 50 00 	call	0xa0	; 0xa0 <SevenSegDimSegments>
 2da:	85 b1       	in	r24, 0x05	; 5
 2dc:	81 60       	ori	r24, 0x01	; 1
 2de:	85 b9       	out	0x05, r24	; 5
 2e0:	85 b1       	in	r24, 0x05	; 5
 2e2:	80 61       	ori	r24, 0x10	; 16
 2e4:	85 b9       	out	0x05, r24	; 5
 2e6:	85 b1       	in	r24, 0x05	; 5
 2e8:	80 62       	ori	r24, 0x20	; 32
 2ea:	85 b9       	out	0x05, r24	; 5
 2ec:	8b b1       	in	r24, 0x0b	; 11
 2ee:	80 68       	ori	r24, 0x80	; 128
 2f0:	8b b9       	out	0x0b, r24	; 11
 2f2:	08 95       	ret

000002f4 <SR595PulseSR>:
void SR595AddBit(uint8_t bit);													// Add single bit (0 or 1) into shift register
void SR595AddMultipleBits(uint8_t number);										// Reads 8 first bits of a number and places them into latch register
		

void SR595PulseSR(){															// Add SER's bit to shift register
		SR595_PORT |= (1<<SR595_SRCLK);				
 2f4:	8b b1       	in	r24, 0x0b	; 11
 2f6:	80 61       	ori	r24, 0x10	; 16
 2f8:	8b b9       	out	0x0b, r24	; 11
		SR595_PORT &= ~(1<<SR595_SRCLK);
 2fa:	8b b1       	in	r24, 0x0b	; 11
 2fc:	8f 7e       	andi	r24, 0xEF	; 239
 2fe:	8b b9       	out	0x0b, r24	; 11
 300:	08 95       	ret

00000302 <SR595PulseLatch>:
}

void SR595PulseLatch(){															// Copy bits from shift register to latch register
		SR595_PORT |= (1<<SR595_RCLK);				
 302:	8b b1       	in	r24, 0x0b	; 11
 304:	80 62       	ori	r24, 0x20	; 32
 306:	8b b9       	out	0x0b, r24	; 11
		SR595_PORT &= ~(1<<SR595_RCLK);
 308:	8b b1       	in	r24, 0x0b	; 11
 30a:	8f 7d       	andi	r24, 0xDF	; 223
 30c:	8b b9       	out	0x0b, r24	; 11
 30e:	08 95       	ret

00000310 <SR595AddBit>:
}

void SR595AddBit(uint8_t bit){													// Only bit is added doesn't copy to latch			
	if (bit == 0){
 310:	81 11       	cpse	r24, r1
 312:	03 c0       	rjmp	.+6      	; 0x31a <SR595AddBit+0xa>
		SR595_PORT &= ~(1<<SR595_SER);
 314:	9b b1       	in	r25, 0x0b	; 11
 316:	9f 7b       	andi	r25, 0xBF	; 191
 318:	9b b9       	out	0x0b, r25	; 11
	}
	if (bit == 1) {
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	19 f4       	brne	.+6      	; 0x324 <SR595AddBit+0x14>
		SR595_PORT |= (1<<SR595_SER);
 31e:	8b b1       	in	r24, 0x0b	; 11
 320:	80 64       	ori	r24, 0x40	; 64
 322:	8b b9       	out	0x0b, r24	; 11
	}
	SR595PulseSR();
 324:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <SR595PulseSR>
 328:	08 95       	ret

0000032a <SR595AddMultipleBits>:
}

void SR595AddMultipleBits(uint8_t number){										// Reads first 8 bits of integer number starting from MSB
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	d8 2f       	mov	r29, r24
	uint8_t bitHold;															// Holds the bit
	uint8_t i = 7;																// Sends bits from MSB(7) to 0
 330:	c7 e0       	ldi	r28, 0x07	; 7
	
	while (i >= 0 && i != 255){													// When unsigned 1 byte integer is decremented at zero, it becomes 255
 332:	0e c0       	rjmp	.+28     	; 0x350 <SR595AddMultipleBits+0x26>
		bitHold = (number & (1 << i)) ? 1 : 0;									// Compares numbers bits and bit at place i, if they match returns 1 otherwise returns 0
 334:	2d 2f       	mov	r18, r29
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	0c 2e       	mov	r0, r28
 33a:	02 c0       	rjmp	.+4      	; 0x340 <SR595AddMultipleBits+0x16>
 33c:	35 95       	asr	r19
 33e:	27 95       	ror	r18
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <SR595AddMultipleBits+0x12>
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	20 ff       	sbrs	r18, 0
 348:	80 e0       	ldi	r24, 0x00	; 0
		SR595AddBit(bitHold);
 34a:	0e 94 88 01 	call	0x310	; 0x310 <SR595AddBit>
		i--;
 34e:	c1 50       	subi	r28, 0x01	; 1

void SR595AddMultipleBits(uint8_t number){										// Reads first 8 bits of integer number starting from MSB
	uint8_t bitHold;															// Holds the bit
	uint8_t i = 7;																// Sends bits from MSB(7) to 0
	
	while (i >= 0 && i != 255){													// When unsigned 1 byte integer is decremented at zero, it becomes 255
 350:	cf 3f       	cpi	r28, 0xFF	; 255
 352:	81 f7       	brne	.-32     	; 0x334 <SR595AddMultipleBits+0xa>
		bitHold = (number & (1 << i)) ? 1 : 0;									// Compares numbers bits and bit at place i, if they match returns 1 otherwise returns 0
		SR595AddBit(bitHold);
		i--;
	}
	SR595PulseLatch();															// 8 bits have been added to shift register before copying it to latch
 354:	0e 94 81 01 	call	0x302	; 0x302 <SR595PulseLatch>
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

0000035e <waitMS>:

		} // END WHILE

	}	// END MAIN

	void waitMS (uint16_t delayMS) {
 35e:	9c 01       	movw	r18, r24
			
		TCNT0 = 0x00;								// Clear timer
 360:	16 bc       	out	0x26, r1	; 38
		TIFR0 |= 1<<OCF0A;							// Clear flag by writing logic 1
 362:	95 b3       	in	r25, 0x15	; 21
 364:	92 60       	ori	r25, 0x02	; 2
 366:	95 bb       	out	0x15, r25	; 21
		uint16_t i;
		uint16_t cycles = delayMS / 10;
 368:	ad ec       	ldi	r26, 0xCD	; 205
 36a:	bc ec       	ldi	r27, 0xCC	; 204
 36c:	0e 94 0a 02 	call	0x414	; 0x414 <__umulhisi3>
 370:	ac 01       	movw	r20, r24
 372:	56 95       	lsr	r21
 374:	47 95       	ror	r20
 376:	56 95       	lsr	r21
 378:	47 95       	ror	r20
 37a:	56 95       	lsr	r21
 37c:	47 95       	ror	r20
	
		for (i = 0; i<cycles; i++)
 37e:	20 e0       	ldi	r18, 0x00	; 0
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	07 c0       	rjmp	.+14     	; 0x392 <waitMS+0x34>
		{
			while (!(TIFR0 & (1<<OCF0A)));			// While flag is not set stay in this loop
 384:	a9 9b       	sbis	0x15, 1	; 21
 386:	fe cf       	rjmp	.-4      	; 0x384 <waitMS+0x26>
			TIFR0 |= 1<<OCF0A;						// Clear flag
 388:	95 b3       	in	r25, 0x15	; 21
 38a:	92 60       	ori	r25, 0x02	; 2
 38c:	95 bb       	out	0x15, r25	; 21
		TCNT0 = 0x00;								// Clear timer
		TIFR0 |= 1<<OCF0A;							// Clear flag by writing logic 1
		uint16_t i;
		uint16_t cycles = delayMS / 10;
	
		for (i = 0; i<cycles; i++)
 38e:	2f 5f       	subi	r18, 0xFF	; 255
 390:	3f 4f       	sbci	r19, 0xFF	; 255
 392:	24 17       	cp	r18, r20
 394:	35 07       	cpc	r19, r21
 396:	b0 f3       	brcs	.-20     	; 0x384 <waitMS+0x26>
		{
			while (!(TIFR0 & (1<<OCF0A)));			// While flag is not set stay in this loop
			TIFR0 |= 1<<OCF0A;						// Clear flag
		}

 398:	08 95       	ret

0000039a <main>:
				1/(16M/1024) = 64us
				10ms/64us = 156.25
				-> If compare value is set to 157 timer takes 10.048 ms
		*/
	
		TCCR0A = 1<<WGM01;									// Clear timer on compare match WGM02:0 = 2
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	84 bd       	out	0x24, r24	; 36
		OCR0A = 157;										// Compare value for 10ms
 39e:	8d e9       	ldi	r24, 0x9D	; 157
 3a0:	87 bd       	out	0x27, r24	; 39
		TCNT0  = 0x00;										// reset counter
 3a2:	16 bc       	out	0x26, r1	; 38
		TIFR0 |= OCF0A;										// clear IRQ flag writing 1's to register
 3a4:	85 b3       	in	r24, 0x15	; 21
 3a6:	81 60       	ori	r24, 0x01	; 1
 3a8:	85 bb       	out	0x15, r24	; 21
		TCCR0B = _BV(CS00) | _BV(CS02);						// prescaler 1024 
 3aa:	85 e0       	ldi	r24, 0x05	; 5
 3ac:	85 bd       	out	0x25, r24	; 37
	
		/* DATA DIRECTIONS */
		SR595_DDR |= (1<<SR595_SER) | (1<<SR595_SRCLK) | (1<<SR595_RCLK);
 3ae:	8a b1       	in	r24, 0x0a	; 10
 3b0:	80 67       	ori	r24, 0x70	; 112
 3b2:	8a b9       	out	0x0a, r24	; 10
		SEGMENT_AF_DDR |= 0xFF;								
 3b4:	84 b1       	in	r24, 0x04	; 4
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	84 b9       	out	0x04, r24	; 4
		SEGMENT_G_DDR |= (1<<SEGMENT_G);
 3ba:	8a b1       	in	r24, 0x0a	; 10
 3bc:	80 68       	ori	r24, 0x80	; 128
 3be:	8a b9       	out	0x0a, r24	; 10
	
		uint8_t i = 0;										// As i is an unsigned 8 bit integer, it will just flip to 0 when it goes over 255, no need to make any if statements to prevent overflow for the counter
 3c0:	c0 e0       	ldi	r28, 0x00	; 0
	
		while(1){
			
			if (BUTTON_INCREMENT_ON){
 3c2:	4a 9b       	sbis	0x09, 2	; 9
 3c4:	0b c0       	rjmp	.+22     	; 0x3dc <main+0x42>
				waitMS(BUTTON_BOUNCE_DELAY);
 3c6:	84 e1       	ldi	r24, 0x14	; 20
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 af 01 	call	0x35e	; 0x35e <waitMS>
					if(BUTTON_INCREMENT_ON) {
 3ce:	4a 9b       	sbis	0x09, 2	; 9
 3d0:	05 c0       	rjmp	.+10     	; 0x3dc <main+0x42>
						i++;
 3d2:	cf 5f       	subi	r28, 0xFF	; 255
						waitMS(DELAY);
 3d4:	8e e1       	ldi	r24, 0x1E	; 30
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 af 01 	call	0x35e	; 0x35e <waitMS>
					}
				
			}
			if (BUTTON_DECREMENT_ON){
 3dc:	4b 9b       	sbis	0x09, 3	; 9
 3de:	0b c0       	rjmp	.+22     	; 0x3f6 <main+0x5c>
				waitMS(BUTTON_BOUNCE_DELAY);
 3e0:	84 e1       	ldi	r24, 0x14	; 20
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 af 01 	call	0x35e	; 0x35e <waitMS>
					if(BUTTON_DECREMENT_ON) {
 3e8:	4b 9b       	sbis	0x09, 3	; 9
 3ea:	05 c0       	rjmp	.+10     	; 0x3f6 <main+0x5c>
						i--;
 3ec:	c1 50       	subi	r28, 0x01	; 1
						waitMS(DELAY);
 3ee:	8e e1       	ldi	r24, 0x1E	; 30
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 af 01 	call	0x35e	; 0x35e <waitMS>
					}
			}
			
			SR595AddMultipleBits(i);
 3f6:	8c 2f       	mov	r24, r28
 3f8:	0e 94 95 01 	call	0x32a	; 0x32a <SR595AddMultipleBits>
			SevenSegTurnNumberOn(i/16);
 3fc:	8c 2f       	mov	r24, r28
 3fe:	82 95       	swap	r24
 400:	8f 70       	andi	r24, 0x0F	; 15
 402:	0e 94 56 00 	call	0xac	; 0xac <SevenSegTurnNumberOn>

		} // END WHILE
 406:	dd cf       	rjmp	.-70     	; 0x3c2 <main+0x28>

00000408 <__tablejump2__>:
 408:	ee 0f       	add	r30, r30
 40a:	ff 1f       	adc	r31, r31
 40c:	05 90       	lpm	r0, Z+
 40e:	f4 91       	lpm	r31, Z
 410:	e0 2d       	mov	r30, r0
 412:	09 94       	ijmp

00000414 <__umulhisi3>:
 414:	a2 9f       	mul	r26, r18
 416:	b0 01       	movw	r22, r0
 418:	b3 9f       	mul	r27, r19
 41a:	c0 01       	movw	r24, r0
 41c:	a3 9f       	mul	r26, r19
 41e:	70 0d       	add	r23, r0
 420:	81 1d       	adc	r24, r1
 422:	11 24       	eor	r1, r1
 424:	91 1d       	adc	r25, r1
 426:	b2 9f       	mul	r27, r18
 428:	70 0d       	add	r23, r0
 42a:	81 1d       	adc	r24, r1
 42c:	11 24       	eor	r1, r1
 42e:	91 1d       	adc	r25, r1
 430:	08 95       	ret

00000432 <_exit>:
 432:	f8 94       	cli

00000434 <__stop_program>:
 434:	ff cf       	rjmp	.-2      	; 0x434 <__stop_program>
